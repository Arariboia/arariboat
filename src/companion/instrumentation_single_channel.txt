//THIS IS A FILE FOR QUICK BENCH TESTS

#include <Arduino.h>
#include "Adafruit_ADS1X15.h"
#include <Wire.h>

// Alias for the ADS1115 class
using ADS1115 = Adafruit_ADS1115;

// I2C address for the currents ADC
constexpr uint8_t CURRENTS_ADC_ADDRESS = 0x48;

// GPIO pins for I2C
constexpr gpio_num_t I2C_SDA_PIN = GPIO_NUM_21;
constexpr gpio_num_t I2C_SCL_PIN = GPIO_NUM_19;

// --- Calibration for Channel 0 ---
// These are the default values from your original code for the first channel.
// y = slope * x + intercept, where 'x' is the raw ADC reading
constexpr float SLOPE = 0.013063f;
constexpr float INTERCEPT = -227.935685f;

// Create an instance of the ADS1115
ADS1115 currentsAdc;

// Simple function to apply the linear correction
float apply_correction(int16_t raw_adc_value) {
    return (static_cast<float>(raw_adc_value) * SLOPE) + INTERCEPT;
}

void InstrumentationTask(void *parameter) {
    // A small delay to allow the serial monitor to connect
    vTaskDelay(pdMS_TO_TICKS(1000)); 

    Serial.println("Starting simple current logger...");

    // Initialize the I2C bus
    Wire.begin(I2C_SDA_PIN, I2C_SCL_PIN);

    // Initialize the currents ADC
    if (!currentsAdc.begin(CURRENTS_ADC_ADDRESS)) {
        Serial.printf("[ERROR] Failed to initialize Currents ADC at address 0x%X. Please check the connection.\n", CURRENTS_ADC_ADDRESS);
        // Halt execution if the sensor can't be found
        while (true) {
            vTaskDelay(pdMS_TO_TICKS(1000));
        }
    }

    // Configure the ADC
    // Set the gain to +/-4.096V range. This matches the original code's configuration.
    currentsAdc.setGain(GAIN_ONE);
    // Set the data rate to 16 samples per second.
    currentsAdc.setDataRate(RATE_ADS1115_16SPS);

    Serial.println("Currents ADC initialized successfully. Starting measurements.");
    Serial.println("Timestamp (s), Raw ADC Value, Current (A)");

    while (true) {
    // Read the raw value from the first channel (A0) of the ADC
    int16_t raw_adc_value = currentsAdc.readADC_SingleEnded(0);

    // Apply the linear correction to get the current in Amperes
    float current_A = apply_correction(raw_adc_value);

    // Get the time since boot in seconds
    float timestamp_s = millis() / 1000.0f;

    // Print the data in a simple CSV format for easy logging or plotting
    Serial.printf("%.2f, %.3f\n", timestamp_s, current_A);

    // Wait for 500 milliseconds before taking the next reading
    vTaskDelay(pdMS_TO_TICKS(500));
}
}



