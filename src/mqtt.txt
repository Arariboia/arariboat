/* WiFi station Example

    This example code is in the Public Domain (or CC0 licensed, at your option.)

    Unless required by applicable law or agreed to in writing, this
    software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied.
    */
#include <Arduino.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/event_groups.h"
#include "esp_system.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "lwip/err.h"
#include "lwip/sys.h"

#include <stdio.h>
#include <stdlib.h>
#include <inttypes.h>
#include "esp_netif.h"
#include "mqtt_client.h"

/* The examples use WiFi configuration that you can set via project configuration menu

    If you'd rather not, just change the below entries to strings with
    the config you want - ie #define EXAMPLE_WIFI_SSID "mywifissid"
*/
#define EXAMPLE_ESP_WIFI_SSID      "NITEE"
#define EXAMPLE_ESP_WIFI_PASS      "nitee123"
#define EXAMPLE_ESP_MAXIMUM_RETRY  5

/* FreeRTOS event group to signal when we are connected*/
static EventGroupHandle_t s_wifi_event_group;

/* The event group allows multiple bits for each event, but we only care about two events:
 * - we are connected to the AP with an IP
 * - we failed to connect after the maximum amount of retries */
#define WIFI_CONNECTED_BIT BIT0
#define WIFI_FAIL_BIT      BIT1

static const char *TAG = "wifi station";

static int s_retry_num = 0;
static bool should_reconnect_wifi = true;

esp_mqtt_client_handle_t client;

static void event_handler(void* arg, esp_event_base_t event_base,
                                          int32_t event_id, void* event_data)
{
     if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_START) {
          esp_wifi_connect();
     } else if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_DISCONNECTED) {

          if (!should_reconnect_wifi) {
               return;
          }
          if (s_retry_num < EXAMPLE_ESP_MAXIMUM_RETRY) {
                esp_wifi_connect();
                s_retry_num++;
                printf("retry to connect to the AP\n");
          } else {
                xEventGroupSetBits(s_wifi_event_group, WIFI_FAIL_BIT);
          }
          printf("connect to the AP fail\n");
     } else if (event_base == IP_EVENT && event_id == IP_EVENT_STA_GOT_IP) {
          ip_event_got_ip_t* event = (ip_event_got_ip_t*) event_data;
          printf("got ip:" IPSTR "\n", IP2STR(&event->ip_info.ip));
          s_retry_num = 0;
          xEventGroupSetBits(s_wifi_event_group, WIFI_CONNECTED_BIT);
     }
}

void wifi_init_sta(void)
{
     s_wifi_event_group = xEventGroupCreate();

     ESP_ERROR_CHECK(esp_netif_init());

     ESP_ERROR_CHECK(esp_event_loop_create_default());
     esp_netif_create_default_wifi_sta();

     wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
     ESP_ERROR_CHECK(esp_wifi_init(&cfg));

     esp_event_handler_instance_t instance_any_id;
     esp_event_handler_instance_t instance_got_ip;
     ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT,
                                                                          ESP_EVENT_ANY_ID,
                                                                          &event_handler,
                                                                          NULL,
                                                                          &instance_any_id));
     ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT,
                                                                          IP_EVENT_STA_GOT_IP,
                                                                          &event_handler,
                                                                          NULL,
                                                                          &instance_got_ip));

     wifi_config_t wifi_config = {
          {EXAMPLE_ESP_WIFI_SSID, EXAMPLE_ESP_WIFI_PASS}
     };
     ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
     ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &wifi_config) );
     ESP_ERROR_CHECK(esp_wifi_start() );

     printf("wifi_init_sta finished.\n");

     /* Waiting until either the connection is established (WIFI_CONNECTED_BIT) or connection failed for the maximum
      * number of re-tries (WIFI_FAIL_BIT). The bits are set by event_handler() (see above) */
     EventBits_t bits = xEventGroupWaitBits(s_wifi_event_group,
                WIFI_CONNECTED_BIT | WIFI_FAIL_BIT,
                pdFALSE,
                pdFALSE,
                portMAX_DELAY);

     /* xEventGroupWaitBits() returns the bits before the call returned, hence we can test which event actually
      * happened. */
     if (bits & WIFI_CONNECTED_BIT) {
          printf("connected to ap SSID:%s password:%s\n", EXAMPLE_ESP_WIFI_SSID, EXAMPLE_ESP_WIFI_PASS);
     } else if (bits & WIFI_FAIL_BIT) {
          printf("Failed to connect to SSID:%s, password:%s\n", EXAMPLE_ESP_WIFI_SSID, EXAMPLE_ESP_WIFI_PASS);
     } else {
          printf("UNEXPECTED EVENT\n");
     }
}


static void log_error_if_nonzero(const char *message, int error_code)
{
     if (error_code != 0) {
          printf("Last error %s: 0x%x\n", message, error_code);
     }
}

/*
 * @brief Event handler registered to receive MQTT events
 *
 *  This function is called by the MQTT client event loop.
 *
 * @param handler_args user data registered to the event.
 * @param base Event base for the handler(always MQTT Base in this example).
 * @param event_id The id for the received event.
 * @param event_data The data for the event, esp_mqtt_event_handle_t.
 */
static void mqtt_event_handler(void *handler_args, esp_event_base_t base, int32_t event_id, void *event_data)
{
     printf("Event dispatched from event loop base=%s, event_id=%" PRIi32 "\n", base, event_id);
     esp_mqtt_event_handle_t event = (esp_mqtt_event_handle_t)event_data;
     esp_mqtt_client_handle_t client = event->client;
     int msg_id;
     switch ((esp_mqtt_event_id_t)event_id) {
     case MQTT_EVENT_CONNECTED:
          printf("MQTT_EVENT_CONNECTED\n");
          msg_id = esp_mqtt_client_publish(client, "arariboia", "Connected", 0, 1, 0);
          printf("sent publish successful, msg_id=%d\n", msg_id);

          msg_id = esp_mqtt_client_subscribe(client, "arariboia", 0);
          printf("sent subscribe successful, msg_id=%d\n", msg_id);

     case MQTT_EVENT_DISCONNECTED:
          printf("MQTT_EVENT_DISCONNECTED\n");
          break;

     case MQTT_EVENT_SUBSCRIBED:
          printf("MQTT_EVENT_SUBSCRIBED, msg_id=%d\n", event->msg_id);
          msg_id = esp_mqtt_client_publish(client, "arariboia", "data", 0, 0, 0);
          printf("sent publish successful, msg_id=%d\n", msg_id);
          break;
     case MQTT_EVENT_UNSUBSCRIBED:
          printf("MQTT_EVENT_UNSUBSCRIBED, msg_id=%d\n", event->msg_id);
          break;
     case MQTT_EVENT_PUBLISHED:
          printf("MQTT_EVENT_PUBLISHED, msg_id=%d\n", event->msg_id);
          break;
     case MQTT_EVENT_DATA:
          printf("MQTT_EVENT_DATA\n");
          printf("TOPIC=%.*s\r\n", event->topic_len, event->topic);
          printf("DATA=%.*s\r\n", event->data_len, event->data);
          break;
     case MQTT_EVENT_ERROR:
          printf("MQTT_EVENT_ERROR\n");
          if (event->error_handle->error_type == MQTT_ERROR_TYPE_TCP_TRANSPORT) {
                log_error_if_nonzero("reported from esp-tls", event->error_handle->esp_tls_last_esp_err);
                log_error_if_nonzero("reported from tls stack", event->error_handle->esp_tls_stack_err);
                log_error_if_nonzero("captured as transport's socket errno",  event->error_handle->esp_transport_sock_errno);
                printf("Last errno string (%s)\n", strerror(event->error_handle->esp_transport_sock_errno));

          }
          break;
     default:
          printf("Other event id:%d\n", event->event_id);
          break;
     }
}

static void mqtt_app_start(void)
{
     #define CONFIG_BROKER_URL "mqtt://broker.hivemq.com:1883"
     esp_mqtt_client_config_t mqtt_cfg = {};
     mqtt_cfg.uri = CONFIG_BROKER_URL;

     client = esp_mqtt_client_init(&mqtt_cfg);
     /* The last argument may be used to pass data to the event handler, in this example mqtt_event_handler */
     esp_mqtt_client_register_event(client, MQTT_EVENT_ANY, mqtt_event_handler, NULL);
     esp_mqtt_client_start(client);
}

bool send_data_mqtt(const char* topic, const char* data) {
     if (client == NULL) {
          printf("MQTT client not initialized\n");
          return false;
     }

     int msg_id = esp_mqtt_client_publish(client, topic, data, 0, 0, 0);
     if (msg_id == -1) {
          printf("Failed to publish message\n");
          return false;
     }
     return true;
}

bool send_test_data() {
     const char* topic = "arariboia";
     static int count = 0;
     char data[50];
     snprintf(data, sizeof(data), "%d", count++);
     return send_data_mqtt(topic, data);
}

bool send_test_periodically() {
     static unsigned long last_time = 0;
     if (millis() - last_time < 1000) {
          return false;
     }
     last_time = millis();
     return send_test_data();
}

void turn_off_wifi_then_turn_on(uint32_t on_seconds, uint32_t off_seconds) {

     if (!(xEventGroupGetBits(s_wifi_event_group) & WIFI_CONNECTED_BIT)) {
          return;
     }

     static unsigned long last_time = millis();
     if (millis() - last_time < on_seconds * 1000) {
          return;
     }
     last_time = millis();

     static bool stop_wifi = false;
     if (!stop_wifi) {
          esp_err_t ret = esp_wifi_stop();
          if (ret != ESP_OK) {
               printf("Failed to stop Wi-Fi: %s\n", esp_err_to_name(ret));
               return;
          }
          printf("Wi-Fi stopped\n");
          should_reconnect_wifi = false;
          stop_wifi = true;
     }

     static unsigned long wifi_stopped_time = millis();
     if (millis() - wifi_stopped_time < off_seconds * 1000) {
          return;
     }
     wifi_stopped_time = millis();
     should_reconnect_wifi = true;
     esp_err_t ret = esp_wifi_start();
     if (ret != ESP_OK) {
          printf("Failed to start Wi-Fi: %s\n", esp_err_to_name(ret));
          return;
     }
}

void app_main(void)
{
     //Initialize NVS
     esp_err_t ret = nvs_flash_init();
     if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
     }
     ESP_ERROR_CHECK(ret);

     
     /* This helper function configures Wi-Fi or Ethernet, as selected in menuconfig.
      * Read "Establishing Wi-Fi or Ethernet Connection" section in
      * examples/protocols/README.md for more information about this function.
      */
     printf("ESP_WIFI_MODE_STA\n");
     wifi_init_sta();
     mqtt_app_start();
}

void setup() {
     // put your setup code here, to run once:
     Serial.begin(921600);
     Serial.println("Hello, ESP32!");
     app_main();

}

void loop() {
     send_test_periodically();
     turn_off_wifi_then_turn_on(5, 5);
     vTaskDelay(pdMS_TO_TICKS(50));
}
          